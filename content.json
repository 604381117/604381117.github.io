{"meta":{"title":"阳光沥肩头 仿佛自由人","subtitle":null,"description":"Linux C++服务端","author":"icoty","url":"http://yoursite.com","root":"/"},"pages":[{"title":"杨宇","date":"2019-04-12T14:41:48.000Z","updated":"2019-04-17T10:36:22.350Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"ME 男 / 1992 QQ/WeChat：604381117 1864030** / icoty.yangy@gmail.com 技术博客：https://icoty.github.io Leetcode：https://github.com/icoty/LeetCode EDUCATION 北京大学 - 软件工程 / 2018.09～至今 东北大学 - 工业工程 / 2011.09～2015.07 EXPERIENCE浙江大华（ 2018年2月 ~ 2018年9月 ）第三方SDK集成 项目说明：客户的平台通过调用中间SDK API与公司内部平台通信。 功能实现： 在SDK进程中嵌入一个RTSP Client从公司内部平台拉取音视频流之后调用客户的SDK API接口直接推给客户的平台； 在SDK进程中开启一个RPC Client与公司的内部平台通信，SDK进程接收到SDK API的通知消息（由客户的平台发送过来）后立即封装成RPC请求交给RPC Client处理。 相关技术：RTSP拉流，RPC，网络编程，函数指针与函数回调。 第三方智能算法集成 项目说明：内部应用采集的音视频流，需要进行智能算法分析（如人脸检测，区域检测，车辆检测等），客户自己提供了一套算法库来分析这些过程，同时客户也自己开发了一个web界面需要与其自己的算法库通信，由于网络安全限制，客户的web请求不能直接与其自己的算法库通信，必须经由内部应用转发。 功能实现： 三方算法库进程集成HttpServer专职接受第三方web请求，然后回调至算法库内部； 三方算法库进程集成RpcClient专职接受经算法库处理后的元数据，然后发送到内部应用的RpcServer端口进行处理； 开辟两个共享内存专职把内部采集的到音视频传送到算法库进程。 相关技术：Http，共享内存，SDK。 矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）Jenkins持续集成工具 项目说明：通过Jenkins管理产品分支，持续集成工具部署 功能实现： Jenkins搭建与配置； Redhat与Centos平台的版本功能持续验证，Docker平台的探索； Shell脚本，集代码分支、编译、测试、安装、Docker镜像制作和版本发布为一体； 对接Android、IOS、Web端联调、输出详细设计文档。 SKILLS Linux/vim/Makefile/gcc/gdb Mysql C/C++/STL TCP/Socket/Epoll/IPC Shell Docker Http Nginx 数据结构 微信小程序开发 Python/MVP框架 ThinkPHP/MVC框架"},{"title":"分类","date":"2019-04-12T14:45:46.000Z","updated":"2019-04-13T09:28:17.759Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-12T14:45:34.000Z","updated":"2019-04-13T09:28:12.902Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux下Docker快速部署LAMP","slug":"hello-world","date":"2019-04-17T08:02:40.986Z","updated":"2019-04-16T15:11:13.554Z","comments":true,"path":"2019/04/17/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/17/hello-world/","excerpt":"","text":"若你的mac或Linux环境上未安装Docker，请移步Docker安装，确认安装成功之后再进行下文内容。 Quick Start获取基础镜像12$ docker pull tutum/lamp # 从Docker Hub上的tutum用户的仓库获取lamp镜像$ docker images # 列出所有的镜像，会发现多一条记录：tutum/lamp 本文用的镜像源tutum/lamp，目前Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了数量超过 15,000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github。如想注册可移步 Docker Hub。 自定义你的镜像在一个空的目录下新建Dockerfile文件名，填入如下4行内容。1234FROM tutum/lamp:latest # 表示在镜像tutum/lamp:latest之上自定义你的镜像RUN rm -fr /app # 后面会把你的php项目映射到容器的/app/目录下EXPOSE 80 3306 # 暴露80 3306端口CMD [\"/run.sh\"] # 当容器启动后会自动执行容器内部的/run.sh脚本 在Dockerfile的同级目录执行如下命令，该命令会去执行Dockerfile脚本，并构建新的镜像username/my-lamp-app，其中my-lamp-app为自定义的镜像名字，命名成你的即可。如果注册了docker hub，一般将username换层你的用户名，如未注册，可以随便取。我执行的是：“docker build -t icoty1/lamp .”1$ docker build -t username/my-lamp-app . 基于你的镜像运行一个容器1$ docker run -d -v /home/icoty/app/:/app/ -p 80:80 -p 3306:3306 username/my-lamp-app -v /home/icoty/app/:/app/ 表示将/home/icoty/app/目录映射到容器内部的/app/目录，其中/home/icoty/app/为我的php项目存放位置，需要换成你的。 -p 80:80 表示将本机的80端口映射到容器内部的80端口，在容器外面是无法直接访问容器内部端口的，映射后才可以，这样当本机80端口收到数据后会自动转发给容器内部的80端口，不过在容器内部是可以直接访问其他远程主机的，这点保证了容器的封闭性和安全性。 username/my-lamp-app 为前面自定义的镜像名称。 权限修改123$ docker ps -a # 查看上一步运行的容器，找到username/my-lamp-app对应的CONTAINER ID$ docker exec -it ID /bin/bash # 根据容器ID进入容器，其中ID为前一句找到的CONTAINER ID$ chown -R www-data:www-data /app/ # 将php项目目录权限修改为运行apache的用户组，否则会因为权限不够，web页面打不开 访问测试1http://ip/public/index.php 注意：/app/目录下的各个子目录下如果存在.htaccess 文件，会导致web页面无法访问对应子目录，只需将.htaccess重命名为.htaccess.bak即可解决。","categories":[{"name":"IDE","slug":"IDE","permalink":"http://yoursite.com/categories/IDE/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"http://yoursite.com/tags/LAMP/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"MVC","slug":"MVC","permalink":"http://yoursite.com/tags/MVC/"}]}]}
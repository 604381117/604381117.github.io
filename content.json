{"meta":{"title":"唯有生活不谈情怀","subtitle":"阳光沥肩头 仿佛自由人","description":"Linux C++后端/Python/MVP/PHP/小程序","author":"杨宇/icoty","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2019-04-12T14:41:48.000Z","updated":"2019-04-13T09:31:30.139Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-04-12T14:45:46.000Z","updated":"2019-04-13T09:28:17.759Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-12T14:45:34.000Z","updated":"2019-04-13T09:28:12.902Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux下Docker快速键部署LAMP","slug":"hello-world","date":"2019-04-16T12:51:39.151Z","updated":"2019-04-16T12:35:15.609Z","comments":true,"path":"2019/04/16/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/16/hello-world/","excerpt":"","text":"若你的mac或Linux环境未上安装Docker，请移步Docker安装，确认安装成功之后再进行下文内容。 Quick Start获取基础镜像12$ docker pull tutum/lamp # 从Docker Hub上的tutum用户的仓库获取lamp镜像$ docker images # 列出所有的镜像，会发现多一条记录：tutum/lamp 本文用的镜像源tutum/lamp，目前Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了数量超过 15,000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github。如想注册可移步 Docker Hub。 自定义你的镜像在一个空的目录下新建Dockerfile文件名，填入如下4行内容。1234FROM tutum/lamp:latest # 表示在镜像tutum/lamp:latest之上自定义你的镜像RUN rm -fr /app # 后面会把你的php项目映射到容器的/app/目录下EXPOSE 80 3306 # 暴露80 3306端口CMD [\"/run.sh\"] # 当容器启动后会自动执行容器内部的/run.sh脚本 在Dockerfile的同级目录执行如下命令，该命令会去执行Dockerfile脚本，并构建新的镜像username/my-lamp-app，其中my-lamp-app为自定义的镜像名字，命名成你的即可。如果注册了docker hub，一般将username换层你的用户名，如未注册，可以随便取。我执行的是：“docker build -t icoty1/lamp .”1$ docker build -t username/my-lamp-app . 基于你的镜像运行一个容器1$ docker run -d -v /home/icoty/app/:/app/ -p 80:80 -p 3306:3306 username/my-lamp-app -v /home/icoty/app/:/app/ 表示将/home/icoty/app/目录映射到容器内部的/app/目录，其中/home/icoty/app/为我的php项目存放位置，需要换成你的。 -p 80:80 表示将本机的80端口映射到容器内部的80端口，在容器外面是无法直接访问容器内部端口的，映射后才可以，这样当本机80端口收到数据后会自动转发给容器内部的80端口，不过在容器内部是可以直接访问其他远程主机的，这点保证了容器的封闭性和安全性。 username/my-lamp-app 为前面自定义的镜像名称。 权限修改123$ docker ps -a # 查看上一步运行的容器，找到username/my-lamp-app对应的CONTAINER ID$ docker exec -it ID /bin/bash # 根据容器ID进入容器，其中ID为前一句找到的CONTAINER ID$ chown -R www-data:www-data /app/ # 将php项目目录权限修改为运行apache的用户组，否则会因为权限不够，web页面打不开 访问测试1http://ip/public/index.php 注意：/app/目录下的各个子目录下如果存在.htaccess 文件，会导致web页面无法访问对应子目录，只需将.htaccess重命名为.htaccess.bak即可解决。","categories":[{"name":"IDE","slug":"IDE","permalink":"http://yoursite.com/categories/IDE/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"http://yoursite.com/tags/LAMP/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"MVC","slug":"MVC","permalink":"http://yoursite.com/tags/MVC/"}]}]}
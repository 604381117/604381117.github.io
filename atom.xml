<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阳光沥肩头 仿佛自由人</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://icoty.github.io/"/>
  <updated>2019-04-25T16:22:32.000Z</updated>
  <id>https://icoty.github.io/</id>
  
  <author>
    <name>icoty</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>另类P、V操作问题</title>
    <link href="https://icoty.github.io/2019/04/25/stack-pv/"/>
    <id>https://icoty.github.io/2019/04/25/stack-pv/</id>
    <published>2019-04-25T07:06:35.000Z</published>
    <updated>2019-04-25T16:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题模型"><a href="#问题模型" class="headerlink" title="问题模型"></a>问题模型</h3><p>有一个系统，定义如下P、V操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">P(s)：</span><br><span class="line">s.count--;</span><br><span class="line"><span class="keyword">if</span> s&lt;0 <span class="keyword">then</span></span><br><span class="line">将本进程插入相应队列末尾等待; </span><br><span class="line">  </span><br><span class="line">V(s):</span><br><span class="line">s.count++;</span><br><span class="line"><span class="keyword">if</span> s&lt;=0 <span class="keyword">then</span></span><br><span class="line">从相应等待队列队尾唤醒一个进程，将其插入就绪队列;</span><br></pre></td></tr></table></figure></p><p>思考并回答:<br>a. 这样定义P、V操作是否有问题?<br>b. 试用这样的P、V操作实现N个进程竞争使用某一共享变量的互斥机制。<br>c. 对于b的解法，有无效率更高的方法。如有，试问降低了多少复杂性?</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>a. 当然有问题，假设s=2，现有进程p1、p2按顺序来请求共享资源A，p1和p2直接获取A，假设p1和p2都还未释放A的时候，p3、p4、p5按顺序也来请求A，这时s的等待队列L为：(尾)p5p4p3(头)，然后p1释放A，执行V(s)操作从L队尾唤醒p5，L变为：(尾)p4p3(头)。这时A被p2和p5持有，且p2和p5都未释放A的时候，假设这时p1又来请求A，p1被挂起，L变为：(尾)p1p4p3(头)。然后p2释放A执行V(s)操作从L队尾唤醒p1，你会发现p1又竞争到了A，而p3和p4还一次都未竞争到，这会导致越靠近L队首的p3和p4越容易饿死，出现饥饿现象。问题的根源就在于这样定义的P、V操作，由于在信号量的等待队列上是先进后出导致的，这属于栈P、V。</p><p>b. 解决方案<br>这里以N个进程为例进行一般化分析，定义信号量数组S[N-1]，共有N-1个信号量，下标从0～N-2，其中S[i] = N-i-1，表示第i+1个信号量S[i]的储值为N-i-1，初值为何取这个看后面分析，下为伪码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Semaphore S[N-1];// S[i] = N-i-1</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=0 ; i&lt;n-1 ; i++)</span><br><span class="line">P(S[i]);</span><br><span class="line">// 临界区 Critical Section</span><br><span class="line"><span class="keyword">for</span>(int i=n-2 ; i&gt;=0 ; i--)</span><br><span class="line">V(S[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一定要注意P(S[i])操作中的i是从0～N-2，而V(S[i])的i是反过来的从N-2～0，这个很重要，这个就是多级队列的精髓，顺序不能换。<br>下面的分析，假设t1时刻p1进入临界区还没出来之前，t2～tN时刻p2～pN按顺序来请求进入临界区，那么p2～pN都执行for循环，分别被挂起在信号量N-2～0的等待队列上，并且每个信号量的等待队列上有且只有一个进程被挂起。在tN+1时刻p1出临界区，由于V(S[i])是从N-2～0，因此等待在LN-2上的P2最先被唤醒，然后L2进入临界区。之后按顺序p3～pN依次被唤醒，但是由于p2已经进入临界区，p3～pN被唤醒后重新请求临界区，唤醒的顺序与请求临界区的顺序一致，饥饿现象得以解决。</p><p><img src="/2019/04/25/stack-pv/stack-pv.png" alt="聊天窗口模型"></p><p>该方法的资源复杂度为O(N-1)，需要N-1个信号量。</p><p>c. 优化方法<br>除了前面的办法，已经可以确定存在更优方案能把资源复杂度降为O(logN)，具体怎么做暂不揭晓。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题模型&quot;&gt;&lt;a href=&quot;#问题模型&quot; class=&quot;headerlink&quot; title=&quot;问题模型&quot;&gt;&lt;/a&gt;问题模型&lt;/h3&gt;&lt;p&gt;有一个系统，定义如下P、V操作：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="同步机制" scheme="https://icoty.github.io/categories/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
    
      <category term="互斥机制" scheme="https://icoty.github.io/categories/%E4%BA%92%E6%96%A5%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="信号量Semaphores" scheme="https://icoty.github.io/tags/%E4%BF%A1%E5%8F%B7%E9%87%8FSemaphores/"/>
    
      <category term="临界区" scheme="https://icoty.github.io/tags/%E4%B8%B4%E7%95%8C%E5%8C%BA/"/>
    
      <category term="P/V操作" scheme="https://icoty.github.io/tags/P-V%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Docker最简教程</title>
    <link href="https://icoty.github.io/2019/04/22/docker/"/>
    <id>https://icoty.github.io/2019/04/22/docker/</id>
    <published>2019-04-22T12:49:16.000Z</published>
    <updated>2019-04-25T16:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在让你用最短的时间弄懂Docker命令操作，什么虚拟化都太泛泛了，不讲大道理，实践出真知，让你从此的日常开发和工作中在面对Docker时不再茫然失措而是得心应手。本文也不谈安装，我实在认为作为程序员，要是我在这里教你如何安装Docker，既是在浪费你的时间也是在浪费我的时间，请参考<a href="http://www.runoob.com/docker/ubuntu-docker-install.html" rel="external nofollow noopener noreferrer" target="_blank">Docker安装</a>；</p><p>Docker Hub是Docker官方维护的一个公共仓库，其中已经包括了数量超过15 000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github，如想注册可移步 <a href="https://hub.docker.com" rel="external nofollow noopener noreferrer" target="_blank">Docker Hub</a>，注册与否不影响接下来的操作。</p><h3 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h3><p>我认为只要你不是专门研究这个的，那么你只需学会如何使用Docker的一些基本命令，使自己的日常开发和工作不受阻碍，弄清Docker和容器之间的区别，为什么现在很多企业流行Docker，这个东西解决了啥问题，有啥优势就够了。关于Docker是什么有何优势，这里挑了一个简洁的<a href="https://blog.csdn.net/shnsuohaonan/article/details/80651439" rel="external nofollow noopener noreferrer" target="_blank">博客链接</a>。</p><p>接下来从零开始，首先从docker hub仓库上拉取centos镜像，带你走进docker日常命令，学会这些命令，足以应对你的日常开发和工作中关于docker的问题。</p><p>search: 从docker hub仓库搜索带centos的所有镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> seach centos</span><br></pre></td></tr></table></figure></p><p>images: 查看本地所有镜像，pull前左侧REPOSITORY栏无centos。REPOSITORY表示镜像被归入到本地的仓库，比如icoty1/lamp:v1.0.0表示本地icoty1仓库下有一个镜像名为lamp,其TAG(版本)为v1.0.0，每个镜像有一个IMAGE ID唯一标识该镜像，SIZE为镜像大小。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> images</span><br></pre></td></tr></table></figure></p><p>pull: 从docker hub远程仓库把centos镜像拉到本地，pull后再次执行images，会发现centos已经被拉到本地。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> pull centos</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/22/docker/search.png" alt="cmd"></p><p>ps: 只列出正在运行的容器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> ps</span><br></pre></td></tr></table></figure></p><p>ps -a: 列出所有容器, 每一个容器有一个CONTAINER ID唯一标识该容器；IMAGE表示该容器是基于哪个镜像生成的，COMMAND是容器启动时执行的命令，可以传入也可以不传入；STATUS是容器当前的状态，Exit是已停止，Up是正在运行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> ps -a</span><br></pre></td></tr></table></figure></p><p>run: 从镜像衍生一个新的容器并运行；-d后台模式运行容器，-i交互模式运行容器；-p把主机80关口映射到容器的80端口，因为容器具有封闭性，容器外部不能直接访问容器内部的端口，通过映射后，主机80端口收到数据后会转发到容器内部的80端口，不过在容器内是可以直接访问容器外的主机的；-v把主机的/Users/yangyu/ide/LeetCode/目录映射到容器的/LeetCode/，容器内若无/LeetCode/目录会自动创建，用于实现主机和容器之间的目录共享，在两个目录下操作文件是对等的；centos:latest是镜像名称，可以换成IMAGE ID，二者等价；/bin/bash是容器启动时执行的命令，还可以带参数，这个不懂的可以搜索下。执行docker run后再次执行ps命令，能够看到运行中的容器多了一个。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> run -d -ti -p 80:80 -v /Users/yangyu/ide/LeetCode/:/LeetCode/ centos:latest /bin/bash</span><br></pre></td></tr></table></figure></p><p>cp: 拷贝主机/Users/yangyu/ide/LeetCode/Database/目录到容器eaf43b370eb7根目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> cp /Users/yangyu/ide/LeetCode/Database/ eaf43b370eb7:/</span><br></pre></td></tr></table></figure></p><p>exec: 执行该命令进入容器eaf43b370eb7内，进入容器后在容器内/LeetCode/目录下新建readme.py2，在主机/Users/yangyu/ide/LeetCode/目录下能够看到该文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it eaf43b370eb7 /bin/bash</span><br><span class="line"><span class="variable">$cp</span> /LeetCode/readme.py /LeetCode/readme.py2</span><br></pre></td></tr></table></figure></p><p>cp: 从容器eaf43b370eb7根目录下拷贝目录/Database到主机的/Users/yangyu/ide/LeetCode/Database/目录下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> cp eaf43b370eb7:/Database/ /Users/yangyu/ide/LeetCode/Database/</span><br></pre></td></tr></table></figure></p><p>stop/restart: 停止容器eaf43b370eb7然后查看其状态变为Exited；然后通过restart命令重启，容器又处于运行态。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> stop eaf43b370eb7</span><br><span class="line"><span class="variable">$docker</span> restart eaf43b370eb7</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/22/docker/cp-ps-start.png" alt="cmd"></p><p>tag: 把centos镜像归入icoty1仓库下名称为centos，TAG为7，TAG随你定。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> tag centos icoty1/centos:7</span><br></pre></td></tr></table></figure></p><p>commit: 最初pull下来的centos镜像是最简版本，里面没有安装mysql vim等；最初pull下来后基于其运行一个容器，你在容器内部可以安装你需要的环境，比如mysql，apache，nginx，hexo博客等，安装好后通过commit命令把容器提交为一个新的镜像，以后凡是从这个新的镜像运行的容器都带有你安装的内容。-m是提交说明；-p是执行commit命令时暂停该容器；eaf43b370eb7是容器ID。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> commit -m <span class="string">"提交我的自定义镜像，centos7内安装mysql，版本号v1.0.0"</span> -p eaf43b370eb7 icoty1/centos7-mysql:v1.0.0</span><br></pre></td></tr></table></figure></p><p>save: 把镜像03cb190015bf打包成主机目录/Users/yangyu/ide/LeetCode/下的centos7-mysql.tar，然后你可以通过U盘拷贝到其他机器上，在其他机器上通过load命令可以把centos7-mysql.tar加载成一个镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> save 03cb190015bf &gt; /Users/yangyu/ide/LeetCode/centos7-mysql.tar</span><br></pre></td></tr></table></figure></p><p>load: 把centos7-mysql.tar加载为镜像，因为这个包是从我主机上的镜像03cb190015bf打出来的，所以执行load的时候直接返回镜像03cb190015bf，如果在其他机器上执行会生成一个新的镜像ID。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> load &lt; /Users/yangyu/ide/LeetCode/centos7-mysql.tar</span><br></pre></td></tr></table></figure></p><p>push:  把本地icoty1仓库下TAG为v1.0.0的镜像icoty1/centos7-mysql推到远程仓库docker hub上的icoty1仓库下保存，执行push前需要在本地icoty1已经登陆。push成功之后，其他人就可以通过pull命令拉取你的镜像使用了，相当于git clone操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> push icoty1/centos7-mysql:v1.0.0</span><br><span class="line"><span class="variable">$docker</span> pull icoty1/centos7-mysql:v1.0.0</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/22/docker/load-save.png" alt="cmd"></p><p>rm: 删除容器eaf43b370eb7，运行中的容器无法删除。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> rm eaf43b370eb7</span><br></pre></td></tr></table></figure></p><p>rmi: 删除镜像03cb190015bf，在这之前必须删除由该镜像衍生出来的所有容器删除，否则会删除失败，执行该命令后通过images发现镜像已经没有了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> rmi 03cb190015bf</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/22/docker/rmi-rm.png" alt="cmd"></p><p>build: 如下以我搭建hexo博客的Dockerfile举例说明。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像，icoty1/ubuntu-hexo-blog:latest在本地仓库必须已经存在</span></span><br><span class="line">FROM icoty1/ubuntu-hexo-blog:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护人员信息，可写可不写</span></span><br><span class="line">MAINTAINER icoty1 <span class="string">"https://icoty.github.io"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露容器的4000端口，这样主机就可以映射端口到4000了</span></span><br><span class="line">EXPOSE 4000</span><br><span class="line"></span><br><span class="line">/*自动安装所需环境，可替换成安装mysql vim等你需要的命令</span><br><span class="line"> *hexo部分插件安装，使支持rss，图片，字数统计等功能</span><br><span class="line"> */</span><br><span class="line">RUN npm install -g hexo-cli \</span><br><span class="line">&amp;&amp; npm install hexo-server --save \</span><br><span class="line">&amp;&amp; hexo init blog &amp;&amp; <span class="built_in">cd</span> /blog \</span><br><span class="line">&amp;&amp; npm install \</span><br><span class="line">&amp;&amp; npm install hexo-deployer-git --save \</span><br><span class="line">&amp;&amp; npm install hexo-migrator-rss --save \ </span><br><span class="line">&amp;&amp; npm install hexo-asset-image --save\</span><br><span class="line">&amp;&amp; npm install hexo-wordcount --save \</span><br><span class="line">&amp;&amp; npm install hexo-generator-sitemap --save \ </span><br><span class="line">&amp;&amp; npm install hexo-generator-baidu-sitemap --save \ </span><br><span class="line">&amp;&amp; npm install hexo-helper-live2d --save \</span><br><span class="line">&amp;&amp; git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia \</span><br><span class="line">&amp;&amp; sed <span class="string">"s/theme: landscape/theme: yilia/g"</span> -i /blog/_config.yml</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t icoty1/ubuntu-hexo . <span class="comment"># icoty1/ubuntu-hexo是新的镜像的名字</span></span><br><span class="line">$ docker images <span class="comment"># build后会多出icoty1/ubuntu-hexo镜像</span></span><br></pre></td></tr></table></figure><p><img src="/2019/04/22/docker/build.png" alt="cmd"></p><h3 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h3><p>为了便于理解，你可以把镜像理解成一个初始模版A，通过这个模板A你可以复制出模板B、模板C等，模板B和模板C在这里就相当于容器，突然某一天你发现模板A现有的内容已经不能满足你的需求了（比如模板A没有安装Mysql，而你需要安装Mysql），这时你就只能自定义新的模板(相当于自定义新的符合你的要求的镜像)，而自定义方式则可以从模板B或模板C中安装Mysql，安装成功之后，通过docker commit命令将模板B或模板C提交成一个新的初始模板A1（也就是新的镜像），以后所有从模板A1运行的容器就都有Mysql了，然后你就有模板A和模板A1了（就是两个镜像）。</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>实际操作部分，对各个命令有疑问的，相信我，直接执行一遍才是解决你心中疑虑的不二之法，如果你的命令参数不正确，顶多就是报错和执行不成功，不会让你的主机崩溃，最坏也就不过重新执行一遍，IT这个职业，其本身就是一个不断试错、犯错和总结经验的过程，如果你学到了，请我喝奶茶吧，小生会一直奋斗在原创的路上。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://www.runoob.com/docker/docker-command-manual.html" rel="external nofollow noopener noreferrer" target="_blank">Docker命令</a><br><a href="http://www.docker.org.cn/index.html" rel="external nofollow noopener noreferrer" target="_blank">Docker中文社区</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文旨在让你用最短的时间弄懂Docker命令操作，什么虚拟化都太泛泛了，不讲大道理，实践出真知，让你从此的日常开发和工作中在面对Docker时不再茫然失措而是得心应手。本文也不谈安装，我实在认为作为程序员，要是我在这里教你如何安装Docker，既是在浪费你的时间也是在浪费我
      
    
    </summary>
    
      <category term="Docker基础知识" scheme="https://icoty.github.io/categories/Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Docker命令" scheme="https://icoty.github.io/tags/Docker%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Dockerfile" scheme="https://icoty.github.io/tags/Dockerfile/"/>
    
      <category term="镜像" scheme="https://icoty.github.io/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="容器" scheme="https://icoty.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github博客最简教程-Dockerfile自动搭建</title>
    <link href="https://icoty.github.io/2019/04/18/docker-hexo-blog/"/>
    <id>https://icoty.github.io/2019/04/18/docker-hexo-blog/</id>
    <published>2019-04-18T15:23:05.000Z</published>
    <updated>2019-04-25T16:23:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h3><p>拿出你的气质，打开你的电脑，借你半小时搭建好属于你的hexo博客，小生用dockerfile自动帮你搭建好；<br>你只需要在你的mac或linux或windows上提前把docker安装好，如何安装不是我的重点，请参考<a href="http://www.runoob.com/docker/ubuntu-docker-install.html" rel="external nofollow noopener noreferrer" target="_blank">Docker安装</a>；<br>作为程序员，博客就像你的影子，我都已经忘了内心曾经多少次告诫自己，一定要搭建一个属于自己的技术博客，奈何日复一日过去了，近来终于落实到行动上来，所谓明日复明日，明日何其多，早晚要做的事，劝君晚做不如早做。</p><h3 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h3><h4 id="获取基础镜像"><a href="#获取基础镜像" class="headerlink" title="获取基础镜像"></a>获取基础镜像</h4><p>Docker安装成功之后方能进行接下来的操作，如果对Docker基本命令不熟悉又想真懂的可以看下我的另一篇文章<a href="https://icoty.github.io/2019/04/22/docker/">Docker最简教程</a>。首先从我的Docker Hub仓库上获取基础镜像：</p><p><img src="/2019/04/18/docker-hexo-blog/dockerhub.png" alt="docker hub"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull icoty1/ubuntu-hexo-blog <span class="comment"># 从Docker hub上的icoty1用户下获取基础镜像</span></span><br><span class="line">$ docker images <span class="comment"># 查看本地所有镜像，会发现icoty1/ubuntu-hexo-blog已经被pull下来了</span></span><br></pre></td></tr></table></figure><h4 id="生成Dockerfile"><a href="#生成Dockerfile" class="headerlink" title="生成Dockerfile"></a>生成Dockerfile</h4><p>进入一个空的目录下新建空文件Dockerfile，复制如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line">FROM icoty1/ubuntu-hexo-blog:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER icoty1 <span class="string">"https://icoty.github.io"</span> </span><br><span class="line"></span><br><span class="line">EXPOSE 4000</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo部分插件安装，使支持rss，图片，字数统计等功能</span></span><br><span class="line">RUN npm install -g hexo-cli \</span><br><span class="line">&amp;&amp; npm install hexo-server --save \</span><br><span class="line">&amp;&amp; hexo init blog &amp;&amp; <span class="built_in">cd</span> /blog \</span><br><span class="line">&amp;&amp; npm install \</span><br><span class="line">&amp;&amp; npm install hexo-deployer-git --save \</span><br><span class="line">&amp;&amp; npm install hexo-migrator-rss --save \</span><br><span class="line">&amp;&amp; npm install hexo-asset-image --save\</span><br><span class="line">&amp;&amp; npm install hexo-wordcount --save \</span><br><span class="line">&amp;&amp; npm install hexo-generator-sitemap --save \</span><br><span class="line">&amp;&amp; npm install hexo-generator-baidu-sitemap --save \</span><br><span class="line">&amp;&amp; npm install hexo-helper-live2d --save \</span><br><span class="line">&amp;&amp; git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia \</span><br><span class="line">&amp;&amp; sed <span class="string">"s/theme: landscape/theme: yilia/g"</span> -i /blog/_config.yml</span><br></pre></td></tr></table></figure><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>Dockerfile中的最后两行内容表示的含义是从github上把hexo-theme-yilia克隆下来并重命名成yilia，然后放到容器的/blog/themes/目录下，其中hexo-theme-yilia是hexo的主题，hexo有很多种主题，用每一种主题搭建出来的hexo博客界面美观和布局都不尽相同，你可以通过<a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">hexo官网</a>上浏览每一种主题长啥样子，通过<a href="https://github.com/search?q=hexo-theme" rel="external nofollow noopener noreferrer" target="_blank">github</a>获取主题的源码仓库，选择一个你喜欢的主题，并相应的修改这两行。假如你从github选择的主题仓库地址是<a href="https://github.com/yscoder/hexo-theme-indigo.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yscoder/hexo-theme-indigo.git</a> ， 那么你需要按照如下方式进行修改，如果你就想用yilia，那么你不需要做任何修改，我用的主题是<a href="https://github.com/theme-next/hexo-theme-next.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/theme-next/hexo-theme-next.git</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; git <span class="built_in">clone</span> https://github.com/yscoder/hexo-theme-indigo.git themes/indigo \</span><br><span class="line">&amp;&amp; sed <span class="string">"s/theme: landscape/theme: indigo/g"</span> -i /blog/_config.yml</span><br></pre></td></tr></table></figure><h4 id="构建Hexo镜像"><a href="#构建Hexo镜像" class="headerlink" title="构建Hexo镜像"></a>构建Hexo镜像</h4><p>在Dockerfile的同级目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t icoty1/ubuntu-hexo .  <span class="comment"># 把icoty1/ubuntu-hexo替换成你取的名字</span></span><br><span class="line">$ docker images <span class="comment"># 能够看到多出一条记录icoty1/ubuntu-hexo，并能看到该镜像的[IMAGE ID]</span></span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 把[IMAGE ID]替换成上一步构建出来的镜像的ID，该句执行成功会多出来一个容器并有一个[CONTAINER ID]</span><br><span class="line"> * -v /home/yangyu/blog/：/blog/是把本机的/home/yangyu/blog/目录映射到容器的/blog/目录</span><br><span class="line"> * 通过目录映射，你只需要在本机编辑/home/yangyu/blog/目录下的文件，而不用每次都进入容器/blog/目录下编辑文件</span><br><span class="line"> * -p 4000:4000 将主机的4000端口映射到容器的4000端口</span><br><span class="line"> *\</span><br><span class="line">$ docker run -d -ti -p 4000:4000 -v /home/yangyu/blog/：/blog/ [IMAGE ID] /bin/bash </span><br><span class="line">$ docker ps -a<span class="comment"># 执行该句列出当前所有的容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it [CONTAINER ID] /bin/bash <span class="comment"># 根据前一步的容器ID进入该容器内部</span></span><br><span class="line">$ <span class="built_in">cd</span> /blog/ &amp;&amp; hexo s <span class="comment"># 进入容器内部的/blog/目录下，启动hexo</span></span><br></pre></td></tr></table></figure><h4 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h4><p>浏览器访问<a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a> ，出现下图说明已经成功，以后你的博客配置，文章撰写和发布等，都在/home/yangyu/blog/目录下进行，这和在容器内部/blog/目录下操作完全对等。</p><p><img src="/2019/04/18/docker-hexo-blog/yilia.png" alt="yilia"></p><h3 id="Hexo部署到Github"><a href="#Hexo部署到Github" class="headerlink" title="Hexo部署到Github"></a>Hexo部署到Github</h3><p><a href="https://github.com/join?source=header-home" rel="external nofollow noopener noreferrer" target="_blank">注册Github账户</a>，如果已经注册，跳过此步；<br>在github上仓库“用户名.github.io”，比如我的用户名为icoty，仓库名则为：icoty.github.io；</p><p><img src="/2019/04/18/docker-hexo-blog/github.png" alt="yilia"></p><p>执行如下命令生成ssh key，执行完后复制~/.sshid_rsa.pub文件内的全部内容，按照图示添加ssh keys，并粘贴保存到Key栏中，Title栏随便取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span> <span class="comment"># 全程回车</span></span><br><span class="line">$ git config --global user.name <span class="string">"你用github用户名"</span></span><br><span class="line">$ git config --global user.email <span class="string">"你的github邮箱地址"</span></span><br></pre></td></tr></table></figure><p><img src="/2019/04/18/docker-hexo-blog/ssh-key.png" alt="yilia"></p><p><img src="/2019/04/18/docker-hexo-blog/add-key.png" alt="yilia"></p><h3 id="配置Hexo主题"><a href="#配置Hexo主题" class="headerlink" title="配置Hexo主题"></a>配置Hexo主题</h3><p>编辑/blog/_config.yml文件，编辑标题、描述信息、Github信息，下图参见我的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 阳光沥肩头 仿佛自由人 <span class="comment"># 标题</span></span><br><span class="line">subtitle: <span class="comment"># 子标题</span></span><br><span class="line">description: Linux C++服务端 <span class="comment"># 描述信息</span></span><br><span class="line">keywords: </span><br><span class="line">author: icoty</span><br><span class="line">language: zh-CN <span class="comment"># 语言</span></span><br><span class="line">timezone: <span class="comment"># 时区</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repository: git@github.com:icoty/icoty.github.io.git  <span class="comment"># 设置repository对应的链接</span></span><br><span class="line">    branch: master                                        <span class="comment"># 设置提交到的分支</span></span><br><span class="line">    message: Site updated at &#123;&#123; now(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>) &#125;&#125; <span class="comment"># 设置我们提交的信息</span></span><br></pre></td></tr></table></figure><p>执行如下命令发布到github上，通过“https://你的github用户名.github.io”访问，我的是<a href="https://icoty.github.io">https://icoty.github.io</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> generate</span><br><span class="line"><span class="variable">$hexo</span> deploy <span class="comment"># 部署到GitHub</span></span><br></pre></td></tr></table></figure><p>编辑/blog/themes/yilia/_config.yml文件，自定义其他配置，如友链、评论、分享、头像等，这些配置并不是一定要做，做不做都行，只是配置的完善些，你的Hexo博客界面看起来美观些，如何配置在此不一一赘述，请自行查看对应主题的官方文档和Github说明。如果你能操作这里，说明我这个教程还是有效的，感谢你的坚持！</p><h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a><a href="https://hexo.io/zh-cn/docs/commands" rel="external nofollow noopener noreferrer" target="_blank">Hexo命令</a></h3><p>Hexo搭建好后，你可以写博客发布到GitHub 上，别人通过“https://你的github用户名.github.io”就能访问你的博客和看到你写的文章，而这个章节就是教你怎么在本地写你的博客，写博客用的MarkDown语法，推荐你安装MarkDown编辑器Typora。下面列出写博客过程中常用的命令，这些命令都需要走到/blog/目录下执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> new <span class="string">"my-hexo"</span> <span class="comment">#新建my-hexo文章，在/blog/source/_post/目录下生成my-hexo.md，在这个文件里面写你的文章</span></span><br><span class="line"><span class="variable">$hexo</span> generate <span class="comment"># 文章写好后保存，然后执行这条命令，生成静态页面至public目录</span></span><br><span class="line"><span class="variable">$hexo</span> s <span class="comment"># 然后开启预览访问端口（默认端口4000，'ctrl+c'关闭server，‘ctrl+z’放到后台运行），通过http://localhost:4000 查看效果，如果满意就执行下一条命令发布到github</span></span><br><span class="line"><span class="variable">$hexo</span> deploy <span class="comment"># 发布到github，通过https://你用github用户名.github.io 访问</span></span><br><span class="line"><span class="variable">$hexo</span> clean <span class="comment"># 有时你写文章和配置其他内容后，老是不生效，就执行下该命令清除缓存文件 (db.json) 和已生成的静态文件 (public)，不是删除，你的文章仍然在的</span></span><br><span class="line"><span class="variable">$nohup</span> hexo s &amp; <span class="comment"># 启动hexo以后台方式运行</span></span><br><span class="line"><span class="variable">$hexo</span> new page <span class="string">"About"</span> <span class="comment">#新建About页面，这个是配置Hexo界面多出来一个About布局</span></span><br><span class="line"><span class="variable">$hexo</span> <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line"><span class="variable">$hexo</span> version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><h3 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a><a href="https://www.jianshu.com/p/191d1e21f7ed" rel="external nofollow noopener noreferrer" target="_blank">MarkDown语法</a></h3><p>这个比较基础，网上教程也一大堆，MarkDown很容易学，放心比九九表容易多了，只要你用markdown实际动手写过一篇博文后就上手了，因此没啥可说的。</p><h3 id="Next主题配置"><a href="#Next主题配置" class="headerlink" title="Next主题配置"></a>Next主题配置</h3><p>接下来的内容是针对next主题的配置，因为我选择的是next，不同主题可能有差异，特此说明。</p><h4 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h4><p>打开themes/next/source/css/_common/components/post/post.styl文件，在文件最后且在@import之前添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: <span class="comment">#0593d3; //原始链接颜色</span></span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#0593d3; //底部分割线颜色</span></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: <span class="comment">#fc6423; //鼠标经过颜色</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid <span class="comment">#fc6423; //底部分割线颜色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="文章末尾添加“文章结束”标记"><a href="#文章末尾添加“文章结束”标记" class="headerlink" title="文章末尾添加“文章结束”标记"></a>文章末尾添加“文章结束”标记</h4><p>在themes/next/layout/_macro/目录下新建passage-end-tag.swig，填入如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;-------------本文结束&lt;i class=<span class="string">"fa fa-paw"</span>&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后编辑themes/next/layout/_macro/post.swig，按照下图添加代码块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/18/docker-hexo-blog/finish-read.png" alt="yilia"></p><p>最后编辑themes/next/_config.yml，添加如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="添加网页加载进度条"><a href="#添加网页加载进度条" class="headerlink" title="添加网页加载进度条"></a>添加网页加载进度条</h4><p>打开themes/next/_config.yml，搜索“pace:”，设置为true。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pace: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="设置文章的显示顺序"><a href="#设置文章的显示顺序" class="headerlink" title="设置文章的显示顺序"></a>设置文章的显示顺序</h4><p>编辑node_modules/hexo-generator-index/lib/generator.js，在return之前添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="keyword">function</span>(a, b) &#123;</span><br><span class="line"><span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">    <span class="keyword">if</span>(a.top == b.top) <span class="built_in">return</span> b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">return</span> b.top - a.top; // 否则按照top值降序排</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">    <span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">    <span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">return</span> b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在每篇文章的头部添加top字段，top值越大的文章显示越靠前。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo+Github博客最简教程-Dockerfile自动搭建</span><br><span class="line">date: 2019-04-18 15:23:05</span><br><span class="line">top: 6</span><br><span class="line">tags: [Hexo, Dockerfile, Linux, Github]</span><br><span class="line">categories: [IDE]</span><br><span class="line">copyright: ture</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h4 id="添加底部的小图标"><a href="#添加底部的小图标" class="headerlink" title="添加底部的小图标"></a>添加底部的小图标</h4><p>打开themes/next/layout/_partials/footer.swig搜索with-love，修改为如下代码。从<a href="https://fontawesome.com/icons?d=gallery&amp;q=heart" rel="external nofollow noopener noreferrer" target="_blank">fontawesom</a>选择你喜欢的图标名称，我这里选择的是heart。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=<span class="string">"with-love"</span> id=<span class="string">"animate"</span>&gt;</span><br><span class="line">  &lt;i class=<span class="string">"fa fa-heart"</span> aria-hidden = <span class="string">"true"</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h4 id="文章底部添加版权信息"><a href="#文章底部添加版权信息" class="headerlink" title="文章底部添加版权信息"></a>文章底部添加版权信息</h4><p>在themes/next/layout/_macro/下新建 my-copyright.swig，填入如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.copyright %&#125;</span><br><span class="line">&lt;div class=<span class="string">"my_post_copyright"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=<span class="string">"/"</span> title=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(<span class="string">"YYYY年MM月DD日 - HH:MM"</span>) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(<span class="string">"YYYY年MM月DD日 - HH:MM"</span>) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> title=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=<span class="string">"copy-path"</span>  title=<span class="string">"点击复制文章链接"</span>&gt;&lt;i class=<span class="string">"fa fa-clipboard"</span> data-clipboard-text=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  aria-label=<span class="string">"复制成功！"</span>&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=<span class="string">"fa fa-creative-commons"</span>&gt;&lt;/i&gt; &lt;a rel=<span class="string">"license"</span> href=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> target=<span class="string">"_blank"</span> title=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(<span class="string">'.fa-clipboard'</span>);</span><br><span class="line">    $(<span class="string">".fa-clipboard"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: <span class="string">""</span>,   </span><br><span class="line">          text: <span class="string">'复制成功'</span>,</span><br><span class="line">          icon: <span class="string">"success"</span>, </span><br><span class="line">          showConfirmButton: <span class="literal">true</span></span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>然后在themes/next/source/css/_common/components/post/下新建my-post-copyright.styl，填入如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid <span class="comment">#d3d3d3;</span></span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: <span class="built_in">break</span>-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: <span class="comment">#b5b5b5;</span></span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: <span class="comment">#808080;</span></span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: <span class="comment">#a3d2a3;</span></span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: <span class="comment">#000;</span></span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +<span class="function"><span class="title">mobile</span></span>()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: <span class="comment">#808080;</span></span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着编辑themes/next/layout/_macro/post.swig文件，按照下图位置添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &#123;% include <span class="string">'my-copyright.swig'</span> %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/18/docker-hexo-blog/copy-right.png" alt="docker hub"></p><p>接着在themes/next/source/css/_common/components/post/post.styl文件最后添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import <span class="string">"my-post-copyright"</span></span><br></pre></td></tr></table></figure></p><p>然后，还需要在文章的头部添加copyright字段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo+Github博客最简教程-Dockerfile自动搭建</span><br><span class="line">date: 2019-04-18 15:23:05</span><br><span class="line">top: 6</span><br><span class="line">tags: [Hexo, Dockerfile, Linux, Github]</span><br><span class="line">categories: [IDE]</span><br><span class="line">copyright: ture</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>最后，编辑根目录下的_config.yml文件，把url换成你的主页：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory</span></span><br><span class="line">url: https://icoty.github.io  <span class="comment"># 这里换成你的主页</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p><h4 id="添加网易云音乐外链"><a href="#添加网易云音乐外链" class="headerlink" title="添加网易云音乐外链"></a>添加网易云音乐外链</h4><p>登陆网易云音乐网页版；点击个人头像“我的主页”；然后能够看到“我创建的歌单”，如果没有则创建一个歌单；选中一个歌单点进去，能够看到“歌曲列表”，点击“歌曲列表”右边的“生成外链播放器”；然后点击右下角的“复制代码”，粘贴到themes/next/layout/_macro/sidebar.swig文件中指定的位置即可，我的是放在侧栏中”友链”下面的。</p><h4 id="设置文章缩略显示"><a href="#设置文章缩略显示" class="headerlink" title="设置文章缩略显示"></a>设置文章缩略显示</h4><p>编辑themes/next/_config.yml，搜索auto_excerpt，设置为true：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt (Not recommend).</span></span><br><span class="line"><span class="comment"># 设置文章不显示全部  点进去再显示全部</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></p><h4 id="自定义代码块样式"><a href="#自定义代码块样式" class="headerlink" title="自定义代码块样式"></a>自定义代码块样式</h4><p>打开themes\next\source\css_custom\custom.styl，添加如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: <span class="comment">#ff7600;</span></span><br><span class="line">    background: <span class="comment">#fbf7f8;</span></span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid <span class="comment">#d6d6d6;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="把一篇文章归为多类"><a href="#把一篇文章归为多类" class="headerlink" title="把一篇文章归为多类"></a>把一篇文章归为多类</h4><p>如下会把该文章归为Linux/IPC类。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Linux</span><br><span class="line">  - IPC</span><br></pre></td></tr></table></figure></p><p>如下会把该文章归为Linux/IPC和TCP两类。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Linux, ICP]</span><br><span class="line">  - TCP</span><br></pre></td></tr></table></figure></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.jianshu.com/p/9f0e90cc32c2" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/9f0e90cc32c2</a><br><a href="https://www.jianshu.com/p/bff1b1845ac9" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bff1b1845ac9</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;闲谈&quot;&gt;&lt;a href=&quot;#闲谈&quot; class=&quot;headerlink&quot; title=&quot;闲谈&quot;&gt;&lt;/a&gt;闲谈&lt;/h3&gt;&lt;p&gt;拿出你的气质，打开你的电脑，借你半小时搭建好属于你的hexo博客，小生用dockerfile自动帮你搭建好；&lt;br&gt;你只需要在你的mac或l
      
    
    </summary>
    
      <category term="Hexo博客搭建" scheme="https://icoty.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Dockerfile" scheme="https://icoty.github.io/tags/Dockerfile/"/>
    
      <category term="Hexo命令" scheme="https://icoty.github.io/tags/Hexo%E5%91%BD%E4%BB%A4/"/>
    
      <category term="镜像" scheme="https://icoty.github.io/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="容器" scheme="https://icoty.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信-利用共享内存和管道通信实现聊天窗口</title>
    <link href="https://icoty.github.io/2019/04/18/ipc-chat/"/>
    <id>https://icoty.github.io/2019/04/18/ipc-chat/</id>
    <published>2019-04-18T00:16:06.000Z</published>
    <updated>2019-04-25T16:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题模型"><a href="#问题模型" class="headerlink" title="问题模型"></a>问题模型</h3><ol><li>A、B两个进程通过管道通信，A 进程每次接收到的数据通过共享内存传递给A1进程显示，同理，B进程每次接收到的数据通过共享内存传递给B1进程显示；</li><li>对于A、B 进程，采用ctrl+c（实际为SIGINT信号）方式退出，A、B进程通过捕捉SIGINT信号注册信号处理函数进行资源清理，A1、B1进程手动关闭即可。<br><img src="/2019/04/18/ipc-chat/windows.png" alt="聊天窗口模型"></li></ol><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><ol><li>A、B通过管道通信，如果首先通过ctrl+c退出A进程，那么B进程的fifo1管道的写端会收到SIGPIPE信号而终止B进程，因此必须在B进程终止前清理掉被B占用的共享内存2，将共享内存2的引用计数减一，否则，当B1进程退出并清理共享内存2后，共享内存2的引用计数不为0，会导致共享内存2得不到释放；</li><li>为了解决前一个问题，A、B进程在启动后立即将各自的进程id通过管道发送给对方，并在各自的进程退出时向对方进程id发送SIGINT信号，触发对方进程进入信号处理接口执行资源回收工作；</li><li>A和A1通过共享内存1通信，会从A进程和A1进程的虚拟地址空间分配一段连续的页映射到同一块连续的物理内存页上，这样A、A1两个进程都可以间接访问物理内存页，从而达到通信的目的，一般共享内存需要进行保护，读写不能同时进行，也不能同时进行写操作，共享内存省去了从内核缓冲区到用户缓冲区的拷贝，因此效率高。</li></ol><h3 id="编码与效果图"><a href="#编码与效果图" class="headerlink" title="编码与效果图"></a>编码与效果图</h3><p><img src="/2019/04/18/ipc-chat/ret.png" alt="运行结果"></p><p>func.h:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;errno.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;strings.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/select.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/time.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ipc.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/shm.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netdb.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/select.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/time.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/uio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ipc.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/shm.h&gt;</span></span><br></pre></td></tr></table></figure></p><p>processA.cpp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include "func.h"</span></span><br><span class="line"></span><br><span class="line">int shmid;</span><br><span class="line">int pidB;// 存放对端进程B的进程id号</span><br><span class="line">char *p;// 共享内存指针</span><br><span class="line"></span><br><span class="line">// 回收共享内存资源前先杀死对端进程，否则回收失败</span><br><span class="line">void handle(int num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">kill</span>(pidB, SIGINT);</span><br><span class="line">shmdt(p);</span><br><span class="line">int ret;</span><br><span class="line"><span class="keyword">if</span>(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) </span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmctl"</span>);</span><br><span class="line"><span class="built_in">return</span> (void)-1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">signal(SIGINT, handle);</span><br><span class="line"><span class="keyword">if</span>(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))  </span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmget"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmat"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 管道文件为单工通信方式，因此需要建立两条管道</span><br><span class="line">// A进程通过管道文件fifo1的读端fdr读取B进程发送的数据</span><br><span class="line">// A进程通过管道文件fifo2的写端fdw向B进程发送数据</span><br><span class="line">int fdr, fdw;</span><br><span class="line"><span class="keyword">if</span>(-1 == (fdr=open(<span class="string">"fifo1"</span>, O_RDONLY)) || -1 == (fdw=open(<span class="string">"fifo2"</span>, O_WRONLY)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"open fifo1 or open fifo2"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通信之前先通过管道互相告知对方自己的进程id</span><br><span class="line">char s1[10] = &#123;0&#125;;</span><br><span class="line">char s2[10] = &#123;0&#125;;</span><br><span class="line">sprintf(s1, <span class="string">"%d\n"</span>, getpid());</span><br><span class="line">write(fdw, s1, strlen(s1) - 1);</span><br><span class="line"><span class="built_in">read</span>(fdr, s2, strlen(s1) - 1);</span><br><span class="line">pidB = atoi(s2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pipe connect success, A to A1 shmid:[%d], pidA:[%d], pidB:[%d]\n"</span>, shmid, getpid(), pidB);</span><br><span class="line"></span><br><span class="line">char buf[1024] = &#123;0&#125;;</span><br><span class="line">int ret;</span><br><span class="line">fd_set rdset;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">FD_ZERO(&amp;rdset);</span><br><span class="line">FD_SET(0, &amp;rdset);</span><br><span class="line">FD_SET(fdr, &amp;rdset);</span><br><span class="line"><span class="keyword">if</span>((ret=select(fdr+1, &amp;rdset, NULL, NULL, NULL) &gt; 0))</span><br><span class="line">&#123;</span><br><span class="line">// fdr可读,则接收数据之后通过共享内存传给A1</span><br><span class="line"><span class="keyword">if</span>(FD_ISSET(fdr, &amp;rdset))</span><br><span class="line">&#123;</span><br><span class="line">bzero(buf, sizeof(buf));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">read</span>(fdr, buf, sizeof(buf)) &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">strncpy(p, buf, sizeof(buf));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 标准输入可读,读出来传递给B进程</span><br><span class="line"><span class="keyword">if</span>(FD_ISSET(0, &amp;rdset))</span><br><span class="line">&#123;</span><br><span class="line">bzero(buf, sizeof(buf));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">read</span>(STDIN_FILENO, buf, sizeof(buf)) &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">write(fdw, buf, strlen(buf) - 1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fdr);</span><br><span class="line">close(fdw);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>processB.cpp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include "func.h"</span></span><br><span class="line"></span><br><span class="line">int shmid;</span><br><span class="line">int pidA;// 存放对端进程id</span><br><span class="line">char *p;// 共享内存指针</span><br><span class="line"></span><br><span class="line">// 回收共享内存资源前先杀死对端进程，否则回收失败</span><br><span class="line">void handle(int num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">kill</span>(pidA, SIGINT);</span><br><span class="line">shmdt(p);</span><br><span class="line">int ret;</span><br><span class="line"><span class="keyword">if</span>(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) </span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmctl"</span>);</span><br><span class="line"><span class="built_in">return</span> (void)-1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">signal(SIGINT, handle);</span><br><span class="line"><span class="keyword">if</span>(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmget"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmat"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 管道文件为单工通信方式</span><br><span class="line">// B进程通过管道文件fifo1的写端fdw向A进程发送数据</span><br><span class="line">// B进程通过管道文件fifo2的读端fdr接收A进程的数据</span><br><span class="line">int fdr, fdw;</span><br><span class="line"><span class="keyword">if</span>(-1 == (fdw=open(<span class="string">"fifo1"</span>, O_WRONLY)) || -1 == (fdr=open(<span class="string">"fifo2"</span>, O_RDONLY)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"open fifo1 or open fifo2"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通信之前先通过管道互相告知对方自己的进程id</span><br><span class="line">char s1[10] = &#123;0&#125;;</span><br><span class="line">char s2[10] = &#123;0&#125;;</span><br><span class="line">sprintf(s1, <span class="string">"%d\n"</span>, getpid());</span><br><span class="line">write(fdw, s1, strlen(s1) - 1);</span><br><span class="line"><span class="built_in">read</span>(fdr, s2, strlen(s1) - 1);</span><br><span class="line">pidA = atoi(s2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pipe connect success, B to B1 shmid:[%d], pidA:[%d], pidB:[%d]\n"</span>, shmid, pidA, getpid());</span><br><span class="line"></span><br><span class="line">char buf[1024] = &#123;0&#125;;</span><br><span class="line">int ret;</span><br><span class="line">fd_set rdset;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">FD_ZERO(&amp;rdset);</span><br><span class="line">FD_SET(0, &amp;rdset);</span><br><span class="line">FD_SET(fdr, &amp;rdset);</span><br><span class="line"><span class="keyword">if</span>((ret=select(fdr+1, &amp;rdset, NULL, NULL, NULL) &gt; 0))</span><br><span class="line">&#123;</span><br><span class="line">// fdr可读,则接收数据之后通过共享内存传给B1</span><br><span class="line"><span class="keyword">if</span>(FD_ISSET(fdr, &amp;rdset))</span><br><span class="line">&#123;</span><br><span class="line">bzero(buf, sizeof(buf));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">read</span>(fdr, buf, sizeof(buf)) &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">strncpy(p, buf, sizeof(buf));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 标注输入可读,读出来传递给A进程</span><br><span class="line"><span class="keyword">if</span>(FD_ISSET(0, &amp;rdset))</span><br><span class="line">&#123;</span><br><span class="line">bzero(buf, sizeof(buf));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">read</span>(STDIN_FILENO, buf, sizeof(buf)) &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">write(fdw, buf, strlen(buf) - 1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fdr);</span><br><span class="line">close(fdw);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>processA1.cpp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include "fuprintf("p:%s\n", p);nc.h"</span></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buf[1024] = &#123;0&#125;;</span><br><span class="line">int shmid;</span><br><span class="line"><span class="keyword">if</span>(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmget"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *p;</span><br><span class="line"><span class="keyword">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmat"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(strcmp(buf, p)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">// 共享内存有数据可读</span><br><span class="line">bzero(buf, sizeof(buf));</span><br><span class="line">strcpy(buf, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am A1, recv from A:[%s]\n"</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(-1 ==(shmctl(shmid, IPC_RMID, 0)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmctl"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>processB1.cpp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include "func.h"</span></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buf[1024] = &#123;0&#125;;</span><br><span class="line">int shmid;</span><br><span class="line"><span class="keyword">if</span>(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmget"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *p;</span><br><span class="line"><span class="keyword">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmat"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(strcmp(buf, p)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">// 共享内存有数据可读</span><br><span class="line">bzero(buf, sizeof(buf));</span><br><span class="line">strcpy(buf, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am B1, recv from B:[%s]\n"</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(-1 ==(shmctl(shmid, IPC_RMID, 0)))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"shmctl"</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="回收资源"><a href="#回收资源" class="headerlink" title="回收资源"></a>回收资源</h3><ol><li>这里首先通过ctrl+c退出A进程，然后B进程收到SIGPIPE信号退出，A、B进程同时调用各自的信号处理函数回收资源，通过ipcs命令发现拥有者为root的共享内存资源的nattch都为1，分别被A1和B1占有。</li><li>然后手动关闭A1、B1进程，再次执行ipcs命令，发现拥有者为root的共享内存资源不存在，已经释放成功。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipcs  <span class="comment"># 查看共性内存资源数量</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/2019/04/18/ipc-chat/ipcs.png" alt="资源回收图"></p><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h3><p>本文所有<a href="https://github.com/icoty/Linux/tree/master/IPC/chat" rel="external nofollow noopener noreferrer" target="_blank">源码链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题模型&quot;&gt;&lt;a href=&quot;#问题模型&quot; class=&quot;headerlink&quot; title=&quot;问题模型&quot;&gt;&lt;/a&gt;问题模型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;A、B两个进程通过管道通信，A 进程每次接收到的数据通过共享内存传递给A1进程显示，同理，B进程每次接收到的数据
      
    
    </summary>
    
      <category term="同步机制" scheme="https://icoty.github.io/categories/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
    
      <category term="进程间通信" scheme="https://icoty.github.io/categories/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
      <category term="IO多路复用模型" scheme="https://icoty.github.io/categories/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="Linux" scheme="https://icoty.github.io/tags/Linux/"/>
    
      <category term="共享内存" scheme="https://icoty.github.io/tags/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    
      <category term="命名管道" scheme="https://icoty.github.io/tags/%E5%91%BD%E5%90%8D%E7%AE%A1%E9%81%93/"/>
    
      <category term="信号" scheme="https://icoty.github.io/tags/%E4%BF%A1%E5%8F%B7/"/>
    
      <category term="Select" scheme="https://icoty.github.io/tags/Select/"/>
    
  </entry>
  
  <entry>
    <title>Linux下Docker快速部署LAMP</title>
    <link href="https://icoty.github.io/2019/04/16/docker-lamp/"/>
    <id>https://icoty.github.io/2019/04/16/docker-lamp/</id>
    <published>2019-04-16T15:23:05.000Z</published>
    <updated>2019-04-25T06:59:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>若你的mac或Linux环境上未安装Docker，请移步<a href="http://www.runoob.com/docker/ubuntu-docker-install.html" rel="external nofollow noopener noreferrer" target="_blank">Docker安装</a>，确认安装成功之后再进行下文内容。如果你不了解Docker如何操作，但是你又想彻底弄懂Docker命令，可以看我另一篇文章<a href="https://icoty.github.io/2019/04/22/docker/">Docker最简教程</a>。</p><h3 id="拿来即用"><a href="#拿来即用" class="headerlink" title="拿来即用"></a>拿来即用</h3><h4 id="获取LAMP"><a href="#获取LAMP" class="headerlink" title="获取LAMP"></a>获取LAMP</h4><p>LAMP镜像我已经搭建好并且我已经测试过了，没有问题。你只需要直接拿去用，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> pull icoty1/lamp:v1.1.0</span><br><span class="line"><span class="variable">$docker</span> images <span class="comment"># 能够看到icoty1/lamp:v1.1.0已经被拉到你本地</span></span><br><span class="line"><span class="variable">$docker</span> run -d -ti -p 80:80 -p 3306:3306 -v /Users/yangyu/app/:/var/www/html/ icoty1/lamp:v1.1.0 /bin/bash start.sh <span class="comment"># 运行一个容器，目录/Users/yangyu/app/是你本机PHP应用位置</span></span><br></pre></td></tr></table></figure></p><p>/Users/yangyu/app/下存放的是public、thinkphp、vendor、runtime等内容。然后访问<a href="http://localhost" rel="external nofollow noopener noreferrer" target="_blank">http://localhost</a> 能够看到PHP应用目录下的内容，如下图，说明已经成功。<br><img src="/2019/04/16/docker-lamp/php-app.png" alt="php-app"></p><p>然后访问<a href="http://localhost/public/index.php" rel="external nofollow noopener noreferrer" target="_blank">http://localhost/public/index.php</a> ，这个是PHP的入口。如果浏览器打开提示权限不够，不要慌，检查下你无法访问的那个目录下是否存在.htaccess文件，如果有则删除就好了，如果没有则执行如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it [CONTAINER ID] /bin/bash <span class="comment"># 进入前面启动的容器中</span></span><br><span class="line"><span class="variable">$chown</span> -R 0777 /var/www/html/ <span class="comment"># 赋予最高权限</span></span><br><span class="line"><span class="variable">$sh</span> start.sh <span class="comment"># start.sh在根目录下，是重启服务用的</span></span><br></pre></td></tr></table></figure><p>访问phpadmin：<a href="http://localhost/phpmyadmin/index.php" rel="external nofollow noopener noreferrer" target="_blank">http://localhost/phpmyadmin/index.php</a> ，登陆的用户名和密码均为phpmyadmin，登陆后你能够在浏览器上一目了然的对所有数据表进行操作。</p><p>容器内根目录下有个start.sh文件，每次需要重启apache服务和mysql服务时只需要执行这个脚本就好了，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sh</span> start.sh</span><br></pre></td></tr></table></figure><h4 id="LAMP版本"><a href="#LAMP版本" class="headerlink" title="LAMP版本"></a>LAMP版本</h4><p>Ubuntu 18.04.2，PHP 7.2.15，mysql 5.7.25，同时也安装了phpmyadmin。下面是查看版本的命令。mysql数据库的root账户密码是root，phpmyadmin账户密码是phpmyadmin ，你可以把密码修改成你的，<a href="https://www.cnblogs.com/mmx8861/p/9062363.html" rel="external nofollow noopener noreferrer" target="_blank">mysql修改用户密码</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@4f5e11ebccac:/<span class="comment"># cat /etc/issue</span></span><br><span class="line">Ubuntu 18.04.2 LTS \n \l</span><br><span class="line"></span><br><span class="line">root@4f5e11ebccac:/<span class="comment"># php -v</span></span><br><span class="line">PHP 7.2.15-0ubuntu0.18.04.2 (cli) (built: Mar 22 2019 17:05:14) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.15-0ubuntu0.18.04.2, Copyright (c) 1999-2018, by Zend Technologies</span><br><span class="line">root@4f5e11ebccac:/<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 9</span><br><span class="line">Server version: 5.7.25-0ubuntu0.18.04.2 (Ubuntu)</span><br></pre></td></tr></table></figure><p>到这里你的目的就已经达到了，一个完整LAMP服务已经在你本机上跑起来并且能用了。下面的内容是我制作icoty1/lamp:v1.1.0的过程，如果你有兴趣，或者想知道我是怎么制作出来的，欢迎继续围观。</p><h3 id="icoty1-lamp-v1-1-0制作过程"><a href="#icoty1-lamp-v1-1-0制作过程" class="headerlink" title="icoty1/lamp:v1.1.0制作过程"></a>icoty1/lamp:v1.1.0制作过程</h3><h4 id="获取ubuntu基础镜像"><a href="#获取ubuntu基础镜像" class="headerlink" title="获取ubuntu基础镜像"></a>获取ubuntu基础镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull i icoty1/ubuntu:18.04.2-LTS  <span class="comment"># 从icoty1仓库拉取基础镜像并运行一个容器</span></span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>进入前面运行的容器中安装接下来的内容。</p><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$apt</span>-get update</span><br><span class="line"><span class="variable">$apt</span>-get upgrade -y </span><br><span class="line"><span class="variable">$apt</span>-get dist-upgrade -y</span><br><span class="line"><span class="variable">$apt</span>-get install vim -y</span><br><span class="line"><span class="variable">$apt</span>-get install mysql-server mysql-client  -y</span><br></pre></td></tr></table></figure><h5 id="apache-php"><a href="#apache-php" class="headerlink" title="apache/php"></a>apache/php</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$apt</span>-get install apache2 -y</span><br><span class="line"><span class="variable">$vi</span> /etc/apache2/apache2.conf <span class="comment"># 添加 ServerName localhost:80</span></span><br><span class="line"><span class="variable">$apt</span>-get install php7.2 -y <span class="comment"># 这个过程中需要选择国家和时区，如图。</span></span><br><span class="line"><span class="variable">$apt</span>-get install libapache2-mod-php7.2</span><br><span class="line"><span class="variable">$apt</span>-get install php7.2-mysql -y</span><br></pre></td></tr></table></figure><p><img src="/2019/04/16/docker-lamp/time-zone.png" alt="time-zone"></p><h5 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$apt</span>-get install php-mbstring php7.0-mbstring php-gettext</span><br><span class="line"><span class="variable">$service</span> apache2 restart</span><br><span class="line"><span class="variable">$apt</span>-get install phpmyadmin <span class="comment"># 这个过程中会自动创建mysql用户名phpmyadmin，需要手动输入密码，如图。</span></span><br></pre></td></tr></table></figure><p><img src="/2019/04/16/docker-lamp/php-myadmin.png" alt="phpmyadmin"></p><h5 id="使apache解析php文件"><a href="#使apache解析php文件" class="headerlink" title="使apache解析php文件"></a>使apache解析php文件</h5><p> vi /etc/apache2/apache2.conf，添加如下内容，让apache服务知道libphp7.2.so库在哪里，找不到这个动态库就无法解析php文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add by yangyu, current dictory is '/etc/apache2/', so '../../usr/lib/apache2/modules/libphp7.2.so' = '/usr/lib/apache2/modules/libphp7.2.so'</span></span><br><span class="line">LoadModule php7_module ../../usr/lib/apache2/modules/libphp7.2.so</span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">DirectoryIndex index.php index.htm index.html</span><br></pre></td></tr></table></figure></p><p>到此，这个容器内已经搭建好了LAMP服务，使用docker commit命令把这个容器提交为镜像icoty1/lamp:v1.1.0，然后push到我的docker hub仓库上，你所pull的正是我push上去的。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.cnblogs.com/impy/p/8040684.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/impy/p/8040684.html</a> # lamp<br><a href="https://linux.cn/article-7463-1.html" rel="external nofollow noopener noreferrer" target="_blank">https://linux.cn/article-7463-1.html</a> # lamp<br><a href="https://blog.csdn.net/longgeaisisi/article/details/78448525" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/longgeaisisi/article/details/78448525</a> # lamp<br><a href="https://www.cnblogs.com/mmx8861/p/9062363.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/mmx8861/p/9062363.html</a> # mysql密码修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;若你的mac或Linux环境上未安装Docker，请移步&lt;a href=&quot;http://www.runoob.com/docker/ubuntu-docker-install.html&quot; rel=&quot;external nofollow noopener noreferrer&quot;
      
    
    </summary>
    
      <category term="Docker搭建LAMP" scheme="https://icoty.github.io/categories/Docker%E6%90%AD%E5%BB%BALAMP/"/>
    
    
      <category term="Linux" scheme="https://icoty.github.io/tags/Linux/"/>
    
      <category term="Docker命令" scheme="https://icoty.github.io/tags/Docker%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Dockerfile" scheme="https://icoty.github.io/tags/Dockerfile/"/>
    
  </entry>
  
</feed>
